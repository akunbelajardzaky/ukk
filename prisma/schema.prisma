generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  user              user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey_unique")

  @@id([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model authenticator {
  credentialID         String  @unique(map: "Authenticator_credentialID_key")
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Authenticator_userId_fkey")

  @@id([userId, credentialID])
}

model image {
  id          String   @id
  title       String
  description String
  tags        String
  imageUrl    String
  progress    Int
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([userId], map: "Image_userId_fkey")
}

model session {
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey_unique")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique(map: "User_email_key")
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime        @default(now())
  account       account[]
  authenticator authenticator[]
  session       session[]
}

model verificationtoken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model task {
  id          Int           @id @default(autoincrement())
  text        String
  description String?
  priority    task_priority
  status      task_status
  date        DateTime
  createdAt   DateTime      @default(now())
  user_id     String        @db.VarChar(255)
}

enum task_priority {
  LOW
  MEDIUM
  HIGH
}

enum task_status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
